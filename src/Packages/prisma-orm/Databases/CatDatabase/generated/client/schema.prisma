generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://benchmark:benchmark_pwd@localhost:5432/benchmark?schema=public"
}

model cat {
  id            BigInt      @id(map: "pk_cat") @default(autoincrement())
  cat_color_id  Int?
  cat_name      String?     @db.VarChar(256)
  date_of_birth DateTime?   @db.Date
  cat_color     cat_color?  @relation(fields: [cat_color_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cats_cat_color")
  house_cat     house_cat[]
}

model cat_color {
  id         Int        @id(map: "pk_cat_color") @default(autoincrement())
  color_name String     @db.VarChar(256)
  cat        cat[]
  color_hex  color_hex?
}

model color_hex {
  id        Int       @id(map: "pk_color_hex")
  hex_code  String    @db.VarChar(256)
  cat_color cat_color @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_color_hex_cat_colors")
}

model house {
  id            Int         @id(map: "pk_house") @default(autoincrement())
  house_address String?     @db.VarChar(256)
  has_dog       Boolean?
  house_cat     house_cat[]
  toy_house     toy_house[]
}

model house_cat {
  house_id Int
  cat_id   BigInt
  cat      cat   @relation(fields: [cat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_house_cat_cat")
  house    house @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_house_cat_house")

  @@id([house_id, cat_id], map: "pk_house_cat")
}

model toy {
  id               Int            @id(map: "pk_toy") @default(autoincrement())
  toys_producer_id Int?
  toy_name         String         @db.VarChar(256)
  barcode          String         @unique(map: "uc_toy_barcode") @db.VarChar(256)
  price            Decimal        @db.Decimal
  currency         String         @db.VarChar
  naughty          String?        @db.VarChar(256)
  date_introduced  DateTime       @db.Timestamptz()
  toys_producer    toys_producer? @relation(fields: [toys_producer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_toys_toys_producer")
  toy_house        toy_house[]
}

model toy_house {
  toy_id   Int
  house_id Int
  amount   Int   @default(1)
  house    house @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_toy_house_house")
  toy      toy   @relation(fields: [toy_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_toy_house_toy")

  @@id([toy_id, house_id], map: "pk_toy_house")
}

model toys_producer {
  id          Int   @id(map: "pk_toys_producer") @default(autoincrement())
  stock_info  Json
  hq_location Json  @db.Json
  toy         toy[]
}
