/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {
  import type * as db from 'zapatos/db'

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 104
  }

  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **cat**
   * - Table in database
   */
  export namespace cat {
    export type Table = 'cat'
    export interface Selectable {
      /**
       * **cat.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_id_seq'::regclass)`
       */
      id: number
      /**
       * **cat.cat_color_id**
       * - `int4` in database
       * - Nullable, no default
       */
      cat_color_id: number | null
      /**
       * **cat.cat_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      cat_name: string | null
      /**
       * **cat.date_of_birth**
       * - `date` in database
       * - Nullable, no default
       */
      date_of_birth: Date | null
    }
    export interface JSONSelectable {
      /**
       * **cat.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_id_seq'::regclass)`
       */
      id: number
      /**
       * **cat.cat_color_id**
       * - `int4` in database
       * - Nullable, no default
       */
      cat_color_id: number | null
      /**
       * **cat.cat_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      cat_name: string | null
      /**
       * **cat.date_of_birth**
       * - `date` in database
       * - Nullable, no default
       */
      date_of_birth: db.DateString | null
    }
    export interface Whereable {
      /**
       * **cat.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **cat.cat_color_id**
       * - `int4` in database
       * - Nullable, no default
       */
      cat_color_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **cat.cat_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      cat_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **cat.date_of_birth**
       * - `date` in database
       * - Nullable, no default
       */
      date_of_birth?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.DateString | Date)
            | db.Parameter<db.DateString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **cat.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
      /**
       * **cat.cat_color_id**
       * - `int4` in database
       * - Nullable, no default
       */
      cat_color_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **cat.cat_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      cat_name?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **cat.date_of_birth**
       * - `date` in database
       * - Nullable, no default
       */
      date_of_birth?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **cat.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
      /**
       * **cat.cat_color_id**
       * - `int4` in database
       * - Nullable, no default
       */
      cat_color_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **cat.cat_name**
       * - `varchar` in database
       * - Nullable, no default
       */
      cat_name?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **cat.date_of_birth**
       * - `date` in database
       * - Nullable, no default
       */
      date_of_birth?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.DateString | Date)
            | db.Parameter<db.DateString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
    }
    export type UniqueIndex = 'pk_cat'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **cat_color**
   * - Table in database
   */
  export namespace cat_color {
    export type Table = 'cat_color'
    export interface Selectable {
      /**
       * **cat_color.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_color_id_seq'::regclass)`
       */
      id: number
      /**
       * **cat_color.color_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      color_name: string
    }
    export interface JSONSelectable {
      /**
       * **cat_color.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_color_id_seq'::regclass)`
       */
      id: number
      /**
       * **cat_color.color_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      color_name: string
    }
    export interface Whereable {
      /**
       * **cat_color.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_color_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **cat_color.color_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      color_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **cat_color.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_color_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
      /**
       * **cat_color.color_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      color_name: string | db.Parameter<string> | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **cat_color.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('cat_color_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
      /**
       * **cat_color.color_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      color_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
    }
    export type UniqueIndex = 'pk_cat_color'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **color_hex**
   * - Table in database
   */
  export namespace color_hex {
    export type Table = 'color_hex'
    export interface Selectable {
      /**
       * **color_hex.id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      id: number
      /**
       * **color_hex.hex_code**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      hex_code: string
    }
    export interface JSONSelectable {
      /**
       * **color_hex.id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      id: number
      /**
       * **color_hex.hex_code**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      hex_code: string
    }
    export interface Whereable {
      /**
       * **color_hex.id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **color_hex.hex_code**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      hex_code?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **color_hex.id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      id: number | db.Parameter<number> | db.SQLFragment
      /**
       * **color_hex.hex_code**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      hex_code: string | db.Parameter<string> | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **color_hex.id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
      /**
       * **color_hex.hex_code**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      hex_code?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
    }
    export type UniqueIndex = 'pk_color_hex'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **house**
   * - Table in database
   */
  export namespace house {
    export type Table = 'house'
    export interface Selectable {
      /**
       * **house.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('house_id_seq'::regclass)`
       */
      id: number
      /**
       * **house.house_address**
       * - `varchar` in database
       * - Nullable, no default
       */
      house_address: string | null
      /**
       * **house.has_dog**
       * - `bool` in database
       * - Nullable, no default
       */
      has_dog: boolean | null
    }
    export interface JSONSelectable {
      /**
       * **house.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('house_id_seq'::regclass)`
       */
      id: number
      /**
       * **house.house_address**
       * - `varchar` in database
       * - Nullable, no default
       */
      house_address: string | null
      /**
       * **house.has_dog**
       * - `bool` in database
       * - Nullable, no default
       */
      has_dog: boolean | null
    }
    export interface Whereable {
      /**
       * **house.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('house_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **house.house_address**
       * - `varchar` in database
       * - Nullable, no default
       */
      house_address?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **house.has_dog**
       * - `bool` in database
       * - Nullable, no default
       */
      has_dog?:
        | boolean
        | db.Parameter<boolean>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **house.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('house_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
      /**
       * **house.house_address**
       * - `varchar` in database
       * - Nullable, no default
       */
      house_address?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **house.has_dog**
       * - `bool` in database
       * - Nullable, no default
       */
      has_dog?:
        | boolean
        | db.Parameter<boolean>
        | null
        | db.DefaultType
        | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **house.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('house_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
      /**
       * **house.house_address**
       * - `varchar` in database
       * - Nullable, no default
       */
      house_address?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **house.has_dog**
       * - `bool` in database
       * - Nullable, no default
       */
      has_dog?:
        | boolean
        | db.Parameter<boolean>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | boolean
            | db.Parameter<boolean>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
    }
    export type UniqueIndex = 'pk_house'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **house_cat**
   * - Table in database
   */
  export namespace house_cat {
    export type Table = 'house_cat'
    export interface Selectable {
      /**
       * **house_cat.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number
      /**
       * **house_cat.cat_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      cat_id: number
    }
    export interface JSONSelectable {
      /**
       * **house_cat.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number
      /**
       * **house_cat.cat_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      cat_id: number
    }
    export interface Whereable {
      /**
       * **house_cat.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **house_cat.cat_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      cat_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **house_cat.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number | db.Parameter<number> | db.SQLFragment
      /**
       * **house_cat.cat_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      cat_id: number | db.Parameter<number> | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **house_cat.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
      /**
       * **house_cat.cat_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      cat_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
    }
    export type UniqueIndex = 'pk_house_cat'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **toy**
   * - Table in database
   */
  export namespace toy {
    export type Table = 'toy'
    export interface Selectable {
      /**
       * **toy.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toy_id_seq'::regclass)`
       */
      id: number
      /**
       * **toy.toys_producer_id**
       * - `int4` in database
       * - Nullable, no default
       */
      toys_producer_id: number | null
      /**
       * **toy.toy_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      toy_name: string
      /**
       * **toy.barcode**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      barcode: string
      /**
       * **toy.price**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      price: number
      /**
       * **toy.currency**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      currency: string
      /**
       * **toy.naughty**
       * - `varchar` in database
       * - Nullable, no default
       */
      naughty: string | null
    }
    export interface JSONSelectable {
      /**
       * **toy.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toy_id_seq'::regclass)`
       */
      id: number
      /**
       * **toy.toys_producer_id**
       * - `int4` in database
       * - Nullable, no default
       */
      toys_producer_id: number | null
      /**
       * **toy.toy_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      toy_name: string
      /**
       * **toy.barcode**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      barcode: string
      /**
       * **toy.price**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      price: number
      /**
       * **toy.currency**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      currency: string
      /**
       * **toy.naughty**
       * - `varchar` in database
       * - Nullable, no default
       */
      naughty: string | null
    }
    export interface Whereable {
      /**
       * **toy.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toy_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.toys_producer_id**
       * - `int4` in database
       * - Nullable, no default
       */
      toys_producer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.toy_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      toy_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.barcode**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      barcode?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.price**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.currency**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      currency?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy.naughty**
       * - `varchar` in database
       * - Nullable, no default
       */
      naughty?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **toy.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toy_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
      /**
       * **toy.toys_producer_id**
       * - `int4` in database
       * - Nullable, no default
       */
      toys_producer_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
      /**
       * **toy.toy_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      toy_name: string | db.Parameter<string> | db.SQLFragment
      /**
       * **toy.barcode**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      barcode: string | db.Parameter<string> | db.SQLFragment
      /**
       * **toy.price**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      price: number | db.Parameter<number> | db.SQLFragment
      /**
       * **toy.currency**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      currency: string | db.Parameter<string> | db.SQLFragment
      /**
       * **toy.naughty**
       * - `varchar` in database
       * - Nullable, no default
       */
      naughty?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **toy.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toy_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
      /**
       * **toy.toys_producer_id**
       * - `int4` in database
       * - Nullable, no default
       */
      toys_producer_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
      /**
       * **toy.toy_name**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      toy_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
      /**
       * **toy.barcode**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      barcode?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
      /**
       * **toy.price**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
      /**
       * **toy.currency**
       * - `varchar` in database
       * - `NOT NULL`, no default
       */
      currency?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>
      /**
       * **toy.naughty**
       * - `varchar` in database
       * - Nullable, no default
       */
      naughty?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >
    }
    export type UniqueIndex = 'pk_toy' | 'uc_toy_barcode'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **toy_house**
   * - Table in database
   */
  export namespace toy_house {
    export type Table = 'toy_house'
    export interface Selectable {
      /**
       * **toy_house.toy_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      toy_id: number
      /**
       * **toy_house.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number
      /**
       * **toy_house.amount**
       * - `int4` in database
       * - `NOT NULL`, default: `1`
       */
      amount: number
    }
    export interface JSONSelectable {
      /**
       * **toy_house.toy_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      toy_id: number
      /**
       * **toy_house.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number
      /**
       * **toy_house.amount**
       * - `int4` in database
       * - `NOT NULL`, default: `1`
       */
      amount: number
    }
    export interface Whereable {
      /**
       * **toy_house.toy_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      toy_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy_house.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toy_house.amount**
       * - `int4` in database
       * - `NOT NULL`, default: `1`
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **toy_house.toy_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      toy_id: number | db.Parameter<number> | db.SQLFragment
      /**
       * **toy_house.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id: number | db.Parameter<number> | db.SQLFragment
      /**
       * **toy_house.amount**
       * - `int4` in database
       * - `NOT NULL`, default: `1`
       */
      amount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **toy_house.toy_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      toy_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
      /**
       * **toy_house.house_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      house_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>
      /**
       * **toy_house.amount**
       * - `int4` in database
       * - `NOT NULL`, default: `1`
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
    }
    export type UniqueIndex = 'pk_toy_house'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /**
   * **toys_producer**
   * - Table in database
   */
  export namespace toys_producer {
    export type Table = 'toys_producer'
    export interface Selectable {
      /**
       * **toys_producer.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toys_producer_id_seq'::regclass)`
       */
      id: number
      /**
       * **toys_producer.stock_info**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      stock_info: db.JSONValue
      /**
       * **toys_producer.hq_location**
       * - `json` in database
       * - `NOT NULL`, no default
       */
      hq_location: db.JSONValue
    }
    export interface JSONSelectable {
      /**
       * **toys_producer.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toys_producer_id_seq'::regclass)`
       */
      id: number
      /**
       * **toys_producer.stock_info**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      stock_info: db.JSONValue
      /**
       * **toys_producer.hq_location**
       * - `json` in database
       * - `NOT NULL`, no default
       */
      hq_location: db.JSONValue
    }
    export interface Whereable {
      /**
       * **toys_producer.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toys_producer_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >
      /**
       * **toys_producer.stock_info**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      stock_info?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | db.JSONValue
            | db.Parameter<db.JSONValue>
            | db.SQLFragment
            | db.ParentColumn
          >
      /**
       * **toys_producer.hq_location**
       * - `json` in database
       * - `NOT NULL`, no default
       */
      hq_location?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | db.JSONValue
            | db.Parameter<db.JSONValue>
            | db.SQLFragment
            | db.ParentColumn
          >
    }
    export interface Insertable {
      /**
       * **toys_producer.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toys_producer_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment
      /**
       * **toys_producer.stock_info**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      stock_info: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment
      /**
       * **toys_producer.hq_location**
       * - `json` in database
       * - `NOT NULL`, no default
       */
      hq_location: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment
    }
    export interface Updatable {
      /**
       * **toys_producer.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('toys_producer_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >
      /**
       * **toys_producer.stock_info**
       * - `jsonb` in database
       * - `NOT NULL`, no default
       */
      stock_info?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment
          >
      /**
       * **toys_producer.hq_location**
       * - `json` in database
       * - `NOT NULL`, no default
       */
      hq_location?:
        | db.JSONValue
        | db.Parameter<db.JSONValue>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment
          >
    }
    export type UniqueIndex = 'pk_toys_producer'
    export type Column = keyof Selectable
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression
    export type SQL = SQLExpression | SQLExpression[]
  }

  /* --- aggregate types --- */

  export namespace public {
    export type Table =
      | cat.Table
      | cat_color.Table
      | color_hex.Table
      | house.Table
      | house_cat.Table
      | toy.Table
      | toy_house.Table
      | toys_producer.Table
    export type Selectable =
      | cat.Selectable
      | cat_color.Selectable
      | color_hex.Selectable
      | house.Selectable
      | house_cat.Selectable
      | toy.Selectable
      | toy_house.Selectable
      | toys_producer.Selectable
    export type JSONSelectable =
      | cat.JSONSelectable
      | cat_color.JSONSelectable
      | color_hex.JSONSelectable
      | house.JSONSelectable
      | house_cat.JSONSelectable
      | toy.JSONSelectable
      | toy_house.JSONSelectable
      | toys_producer.JSONSelectable
    export type Whereable =
      | cat.Whereable
      | cat_color.Whereable
      | color_hex.Whereable
      | house.Whereable
      | house_cat.Whereable
      | toy.Whereable
      | toy_house.Whereable
      | toys_producer.Whereable
    export type Insertable =
      | cat.Insertable
      | cat_color.Insertable
      | color_hex.Insertable
      | house.Insertable
      | house_cat.Insertable
      | toy.Insertable
      | toy_house.Insertable
      | toys_producer.Insertable
    export type Updatable =
      | cat.Updatable
      | cat_color.Updatable
      | color_hex.Updatable
      | house.Updatable
      | house_cat.Updatable
      | toy.Updatable
      | toy_house.Updatable
      | toys_producer.Updatable
    export type UniqueIndex =
      | cat.UniqueIndex
      | cat_color.UniqueIndex
      | color_hex.UniqueIndex
      | house.UniqueIndex
      | house_cat.UniqueIndex
      | toy.UniqueIndex
      | toy_house.UniqueIndex
      | toys_producer.UniqueIndex
    export type Column =
      | cat.Column
      | cat_color.Column
      | color_hex.Column
      | house.Column
      | house_cat.Column
      | toy.Column
      | toy_house.Column
      | toys_producer.Column

    export type AllBaseTables = [
      cat.Table,
      cat_color.Table,
      color_hex.Table,
      house.Table,
      house_cat.Table,
      toy.Table,
      toy_house.Table,
      toys_producer.Table
    ]
    export type AllForeignTables = []
    export type AllViews = []
    export type AllMaterializedViews = []
    export type AllTablesAndViews = [
      cat.Table,
      cat_color.Table,
      color_hex.Table,
      house.Table,
      house_cat.Table,
      toy.Table,
      toy_house.Table,
      toys_producer.Table
    ]
  }

  /* === global aggregate types === */

  export type Schema = 'public'
  export type Table = public.Table
  export type Selectable = public.Selectable
  export type JSONSelectable = public.JSONSelectable
  export type Whereable = public.Whereable
  export type Insertable = public.Insertable
  export type Updatable = public.Updatable
  export type UniqueIndex = public.UniqueIndex
  export type Column = public.Column

  export type AllSchemas = ['public']
  export type AllBaseTables = [...public.AllBaseTables]
  export type AllForeignTables = [...public.AllForeignTables]
  export type AllViews = [...public.AllViews]
  export type AllMaterializedViews = [...public.AllMaterializedViews]
  export type AllTablesAndViews = [...public.AllTablesAndViews]

  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    cat: cat.Selectable
    cat_color: cat_color.Selectable
    color_hex: color_hex.Selectable
    house: house.Selectable
    house_cat: house_cat.Selectable
    toy: toy.Selectable
    toy_house: toy_house.Selectable
    toys_producer: toys_producer.Selectable
  }[T]

  export type JSONSelectableForTable<T extends Table> = {
    cat: cat.JSONSelectable
    cat_color: cat_color.JSONSelectable
    color_hex: color_hex.JSONSelectable
    house: house.JSONSelectable
    house_cat: house_cat.JSONSelectable
    toy: toy.JSONSelectable
    toy_house: toy_house.JSONSelectable
    toys_producer: toys_producer.JSONSelectable
  }[T]

  export type WhereableForTable<T extends Table> = {
    cat: cat.Whereable
    cat_color: cat_color.Whereable
    color_hex: color_hex.Whereable
    house: house.Whereable
    house_cat: house_cat.Whereable
    toy: toy.Whereable
    toy_house: toy_house.Whereable
    toys_producer: toys_producer.Whereable
  }[T]

  export type InsertableForTable<T extends Table> = {
    cat: cat.Insertable
    cat_color: cat_color.Insertable
    color_hex: color_hex.Insertable
    house: house.Insertable
    house_cat: house_cat.Insertable
    toy: toy.Insertable
    toy_house: toy_house.Insertable
    toys_producer: toys_producer.Insertable
  }[T]

  export type UpdatableForTable<T extends Table> = {
    cat: cat.Updatable
    cat_color: cat_color.Updatable
    color_hex: color_hex.Updatable
    house: house.Updatable
    house_cat: house_cat.Updatable
    toy: toy.Updatable
    toy_house: toy_house.Updatable
    toys_producer: toys_producer.Updatable
  }[T]

  export type UniqueIndexForTable<T extends Table> = {
    cat: cat.UniqueIndex
    cat_color: cat_color.UniqueIndex
    color_hex: color_hex.UniqueIndex
    house: house.UniqueIndex
    house_cat: house_cat.UniqueIndex
    toy: toy.UniqueIndex
    toy_house: toy_house.UniqueIndex
    toys_producer: toys_producer.UniqueIndex
  }[T]

  export type ColumnForTable<T extends Table> = {
    cat: cat.Column
    cat_color: cat_color.Column
    color_hex: color_hex.Column
    house: house.Column
    house_cat: house_cat.Column
    toy: toy.Column
    toy_house: toy_house.Column
    toys_producer: toys_producer.Column
  }[T]

  export type SQLForTable<T extends Table> = {
    cat: cat.SQL
    cat_color: cat_color.SQL
    color_hex: color_hex.SQL
    house: house.SQL
    house_cat: house_cat.SQL
    toy: toy.SQL
    toy_house: toy_house.SQL
    toys_producer: toys_producer.SQL
  }[T]
}
